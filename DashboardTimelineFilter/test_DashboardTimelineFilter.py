# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from test_data import testcases, config


class TestAllDeadlineSortByDate():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()

  # Utils function 
  def findElement(self, by, value, origin = None):
    return (self.driver if not origin else origin).find_element(by, value)

  def click(self, by, value, origin = None): 
    self.findElement(by, value, origin).click()

  # Main functions
  def test_setup(self): 
    self.driver.get("https://school.moodledemo.net/login/index.php")
    self.driver.set_window_size(896, 692)
    self.click(By.ID, "username")
    self.findElement(By.ID, "username").send_keys(config["username"])
    self.click(By.ID, "password")
    self.findElement(By.ID, "password").send_keys(config["password"])
    self.click(By.ID, "loginbtn")
    self.click(By.LINK_TEXT, "Dashboard") 
    self.driver.implicitly_wait(5)

  def test_click_dropdown(self, dropdown_id, dropdown_value):
    self.click(By.ID, dropdown_id)
    self.click(By.LINK_TEXT, dropdown_value)
    self.driver.implicitly_wait(5)
    
  def test_assert(self, assertData):
    elements = self.driver.find_elements(assertData[0], assertData[1])
    assert len(elements) > 0

# Execution
Test = TestAllDeadlineSortByDate()

for testcase in testcases:
  print(testcase["id"])
  Test.setup_method()
  Test.test_setup()

  for dropdown in testcase["dropdownField"]:
    Test.test_click_dropdown(dropdown[0], dropdown[1])
  
  Test.test_assert(testcase["assertData"])
  print('Testcase passed!')
  Test.teardown_method()
