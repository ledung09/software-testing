# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from test_data import testcases, const_path, config

class TestAddEventByDefault():
  def setup_method(self):
    self.driver = webdriver.Chrome()
  
  def teardown_method(self):
    self.driver.quit()

  # Utils function 
  def findElement(self, by, value, origin = None):
    return (self.driver if not origin else origin).find_element(by, value)

  def click(self, by, value, origin = None): 
    self.findElement(by, value, origin).click()

  # Main functions
  def test_setup(self): 
    self.driver.get("https://school.moodledemo.net/login/index.php")
    self.driver.set_window_size(896, 692)
    self.click(By.ID, "username")
    self.findElement(By.ID, "username").send_keys(config["username"])
    self.click(By.ID, "password")
    self.findElement(By.ID, "password").send_keys(config["password"])
    self.click(By.ID, "loginbtn")
    self.click(By.LINK_TEXT, "Dashboard")
    self.click(By.XPATH, "//button[contains(.,\'New event\')]")
    self.driver.implicitly_wait(5)
  
  def test_change_name(self, input):
    self.click(By.ID, "id_name")
    if (input == ""): 
      self.findElement(By.ID, "id_name").clear()
    self.findElement(By.ID, "id_name").send_keys(input)

  
  # Assertion function
  def test_assert(self, assertData):
    self.click(By.XPATH, const_path["save"])
    self.driver.implicitly_wait(5)
    elements = self.driver.find_elements(assertData[0], assertData[1])
    assert len(elements) > 0
    

# Execution
Test = TestAddEventByDefault()

for testcase in testcases:
  print(testcase["id"])
  Test.setup_method()
  Test.test_setup()

  if (testcase["field"] == "name"):
    Test.test_change_name(testcase["inputName"])

  if (testcase["field"] == "duration"):
    Test.test_change_name(testcase["inputName"])
    Test.click(By.XPATH, const_path['show_more'])
    Test.click(By.ID, "id_duration_1")
    Test.click(By.ID, "id_timedurationuntil_day")
    Test.click(By.XPATH, "//option[. = '30']", Test.findElement(By.ID, "id_timedurationuntil_day"))
    Test.click(By.XPATH, "//select[@id=\'id_timedurationuntil_day\']/option[30]")

  if (testcase["field"] == "repeat"):
    Test.test_change_name(testcase["inputName"])
    Test.click(By.XPATH, const_path['show_more'])
    Test.click(By.ID, "id_repeat")
    Test.click(By.ID, "id_repeats")
    Test.findElement(By.ID, "id_repeats").send_keys(testcase["sendKeys"])

  if (testcase["field"] == "locationanddescription"):
    Test.test_change_name(testcase["inputName"])
    Test.click(By.XPATH, const_path['show_more'])
    Test.click(By.ID, "id_location")
    Test.findElement(By.ID, "id_location").send_keys(testcase["sendKeys"])
    

  Test.test_assert(testcase["assertData"])
  print('Testcase passed!')
  Test.teardown_method()

